"use strict";(self.webpackChunkaiconfig_docs=self.webpackChunkaiconfig_docs||[]).push([[510],{6173:(e,o,i)=>{i.r(o),i.d(o,{assets:()=>a,contentTitle:()=>d,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var n=i(5893),t=i(1151);const s={sidebar_position:10},d="Supported Models",r={id:"overview/model-parsers",title:"Supported Models",description:"aiconfig is designed to be model-agnostic and multi-modal, allowing it to work with any model from any provider. For more information on how this works, please see Extensibility",source:"@site/docs/overview/model-parsers.md",sourceDirName:"overview",slug:"/overview/model-parsers",permalink:"/docs/overview/model-parsers",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"docSidebar",previous:{title:"Tracing and Monitoring",permalink:"/docs/overview/monitoring-aiconfig"},next:{title:"Cookbooks & Guides",permalink:"/docs/cookbooks"}},a={},l=[{value:"Default Models",id:"default-models",level:2},{value:"OpenAI",id:"openai",level:3},{value:"Google",id:"google",level:3},{value:"Hugging Face",id:"hugging-face",level:3},{value:"AIConfig Extensions",id:"aiconfig-extensions",level:2}];function c(e){const o={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",...(0,t.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h1,{id:"supported-models",children:"Supported Models"}),"\n",(0,n.jsxs)(o.p,{children:[(0,n.jsx)(o.code,{children:"aiconfig"})," is designed to be model-agnostic and multi-modal, allowing it to work with any model from any provider. For more information on how this works, please see ",(0,n.jsx)(o.a,{href:"/docs/extensibility",children:"Extensibility"})]}),"\n",(0,n.jsx)(o.h2,{id:"default-models",children:"Default Models"}),"\n",(0,n.jsxs)(o.p,{children:[(0,n.jsx)(o.code,{children:"aiconfig"})," ships with out-of-the-box support for a limited number of models."]}),"\n",(0,n.jsx)(o.admonition,{type:"info",children:(0,n.jsxs)(o.p,{children:["We plan on keeping core ",(0,n.jsx)(o.code,{children:"aiconfig"})," lightweight so it doesn't become a monolithic project. Instead, AIConfig extensions should be created and shared to support additional models and functionality. See"]})}),"\n",(0,n.jsx)(o.h3,{id:"openai",children:"OpenAI"}),"\n",(0,n.jsx)(o.h3,{id:"google",children:"Google"}),"\n",(0,n.jsx)(o.h3,{id:"hugging-face",children:"Hugging Face"}),"\n",(0,n.jsx)(o.h2,{id:"aiconfig-extensions",children:"AIConfig Extensions"})]})}function p(e={}){const{wrapper:o}={...(0,t.a)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},1151:(e,o,i)=>{i.d(o,{Z:()=>r,a:()=>d});var n=i(7294);const t={},s=n.createContext(t);function d(e){const o=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function r(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),n.createElement(s.Provider,{value:o},e.children)}}}]);