"use strict";(self.webpackChunkaiconfig_docs=self.webpackChunkaiconfig_docs||[]).push([[758],{3324:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var r=i(5893),t=i(1151);const s={sidebar_position:10},o="SDK Overview",d={id:"sdk",title:"SDK Overview",description:"Model Parsers",source:"@site/docs/sdk.md",sourceDirName:".",slug:"/sdk",permalink:"/docs/sdk",draft:!1,unlisted:!1,editUrl:"https://github.com/lastmile-ai/aiconfig/aiconfig-docs/docs/sdk.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"docSidebar",previous:{title:"Prompt Routing",permalink:"/docs/cookbooks/prompt-routing"},next:{title:"Contributing Guidelines",permalink:"/docs/contributing"}},a={},c=[{value:"Model Parsers",id:"model-parsers",level:2},{value:"AIConfigRuntime",id:"aiconfigruntime",level:2},{value:"AIConfig <code>create</code>",id:"aiconfig-create",level:3},{value:"Prompt <code>resolve</code>",id:"prompt-resolve",level:3},{value:"Prompt <code>serialize</code>",id:"prompt-serialize",level:3},{value:"Prompt <code>run</code>",id:"prompt-run",level:3},{value:"<code>run_with_dependencies</code>",id:"run_with_dependencies",level:3},{value:"Updating metadata and parameters",id:"updating-metadata-and-parameters",level:3},{value:"<code>AIConfigRuntime.registerModelParser</code>",id:"aiconfigruntimeregistermodelparser",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"sdk-overview",children:"SDK Overview"}),"\n",(0,r.jsx)(n.h2,{id:"model-parsers",children:"Model Parsers"}),"\n",(0,r.jsx)(n.h2,{id:"aiconfigruntime",children:"AIConfigRuntime"}),"\n",(0,r.jsx)(n.p,{children:"The AIConfig SDK supports CRUD operations for prompts, models, parameters and metadata. Here are some common examples."}),"\n",(0,r.jsxs)(n.p,{children:["The root interface is the ",(0,r.jsx)(n.code,{children:"AIConfigRuntime"})," object. That is the entrypoint for interacting with an AIConfig programmatically."]}),"\n",(0,r.jsx)(n.p,{children:"Let's go over a few key CRUD operations to give a glimpse"}),"\n",(0,r.jsxs)(n.h3,{id:"aiconfig-create",children:["AIConfig ",(0,r.jsx)(n.code,{children:"create"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'config = AIConfigRuntime.create("aiconfig name", "description")\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"prompt-resolve",children:["Prompt ",(0,r.jsx)(n.code,{children:"resolve"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"resolve"})," deserializes an existing ",(0,r.jsx)(n.code,{children:"Prompt"})," into the data object that its model expects."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'config.resolve("prompt_name", params)\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"params"})," are overrides you can specify to resolve any ",(0,r.jsx)(n.code,{children:"{{handlebars}}"})," templates in the prompt. See the ",(0,r.jsx)(n.code,{children:"gen_itinerary"})," prompt in the Getting Started example."]}),"\n",(0,r.jsxs)(n.h3,{id:"prompt-serialize",children:["Prompt ",(0,r.jsx)(n.code,{children:"serialize"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"serialize"})," is the inverse of ",(0,r.jsx)(n.code,{children:"resolve"})," -- it serializes the data object that a model understands into a ",(0,r.jsx)(n.code,{children:"Prompt"})," object that can be serialized into the ",(0,r.jsx)(n.code,{children:"aiconfig"})," format."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'config.serialize("model_name", data, "prompt_name")\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"prompt-run",children:["Prompt ",(0,r.jsx)(n.code,{children:"run"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"run"})," is used to run inference for the specified ",(0,r.jsx)(n.code,{children:"Prompt"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'config.run("prompt_name", params)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"run_with_dependencies",children:(0,r.jsx)(n.code,{children:"run_with_dependencies"})}),"\n",(0,r.jsxs)(n.p,{children:["There's a variant of ",(0,r.jsx)(n.code,{children:"run"})," called ",(0,r.jsx)(n.code,{children:"run_with_dependencies"})," -- this re-runs all prompt dependencies.\nFor example, in ",(0,r.jsx)(n.a,{href:"#download-travelaiconfigjson",children:(0,r.jsx)(n.code,{children:"travel.aiconfig.json"})}),", the ",(0,r.jsx)(n.code,{children:"gen_itinerary"})," prompt references the output of the ",(0,r.jsx)(n.code,{children:"get_activities"})," prompt using ",(0,r.jsx)(n.code,{children:"{{get_activities.output}}"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Running this function will first execute ",(0,r.jsx)(n.code,{children:"get_activities"}),", and use its output to resolve the ",(0,r.jsx)(n.code,{children:"gen_itinerary"})," prompt before executing it.\nThis is transitive, so it computes the Directed Acyclic Graph of dependencies to execute. Complex relationships can be modeled this way."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'config.run_with_dependencies("gen_itinerary")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"updating-metadata-and-parameters",children:"Updating metadata and parameters"}),"\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.code,{children:"get/setMetadata"})," and ",(0,r.jsx)(n.code,{children:"get/setParameter"})," methods to interact with metadata and parameters (",(0,r.jsx)(n.code,{children:"setParameter"})," is just syntactic sugar to update ",(0,r.jsx)(n.code,{children:'"metadata.parameters"'}),")"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'config.setMetadata("key", data, "prompt_name")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Note: if ",(0,r.jsx)(n.code,{children:'"prompt_name"'})," is specified, the metadata is updated specifically for that prompt. Otherwise, the global metadata is updated."]}),"\n",(0,r.jsx)(n.h3,{id:"aiconfigruntimeregistermodelparser",children:(0,r.jsx)(n.code,{children:"AIConfigRuntime.registerModelParser"})}),"\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.code,{children:"AIConfigRuntime.registerModelParser"})," if you want to use a different ",(0,r.jsx)(n.code,{children:"ModelParser"}),", or configure AIConfig to work with an additional model."]}),"\n",(0,r.jsxs)(n.p,{children:["AIConfig uses the model name string to retrieve the right ",(0,r.jsx)(n.code,{children:"ModelParser"})," for a given Prompt (see ",(0,r.jsx)(n.code,{children:"AIConfigRuntime.getModelParser"}),"), so you can register a different ModelParser for the same ID to override which ",(0,r.jsx)(n.code,{children:"ModelParser"})," handles a Prompt."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, suppose I want to use ",(0,r.jsx)(n.code,{children:"MyOpenAIModelParser"})," to handle ",(0,r.jsx)(n.code,{children:"gpt-4"})," prompts. I can do the following at the start of my application:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'AIConfigRuntime.registerModelParser(myModelParserInstance, ["gpt-4"])\n'})})]})}function p(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>o});var r=i(7294);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);